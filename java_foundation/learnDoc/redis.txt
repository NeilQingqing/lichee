redis安装遇到的问题

[root@bogon redis-4.0]# make test
cd src && make test
make[1]: Entering directory `/usr/redis/redis-4.0/src'
You need tcl 8.5 or newer in order to run the Redis test
make[1]: *** [test] Error 1
make[1]: Leaving directory `/usr/redis/redis-4.0/src'
make: *** [test] Error 2


wget http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz  
sudo tar xzvf tcl8.6.1-src.tar.gz  -C /usr/local/  
cd  /usr/local/tcl8.6.1/unix/  
sudo ./configure  
sudo make  
sudo    

./redis-server ../redis-cluster/7003/redis.conf
ps -ef | grep redis
redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005

集群检测
redis-trib.rb check 127.0.0.1:7000

redis-trib.rb fix 127.0.0.1:7001
客户端连接
redis-cli -c -p 7000

flushall  
cluster reset


客户端连接后执行查看
cluster nodes



redis集群安装
4.4.配置redis集群

4.4.1.环境准备

#	hostname	ip	software	port	notes
1	apollo.dt.com	192.168.56.181	redis	7000
7001
7002	 
2	artemis.dt.com	192.168.56.182	redis	7003
7004
7005	 
3	uranus.dt.com	192.168.56.183	redis	7006
7007
7008	 
4.4.2 在/opt/redis-3.2.9/目录下创建目录redis-cluster



#创建目录redis-cluster
[root@apollo redis-3.2.9]# mkdir redis-cluster
#在redis-cluster目录下创建三个子目录
[root@apollo redis-cluster]# mkdir -p 7000 7001 7002
#把/opt/redis-3.2.9目录下的redis.conf分别拷贝一份到7000, 7001和7002目录下：
[root@apollo redis-cluster]# cp /opt/redis-3.2.9/redis.conf /opt/redis-3.2.9/redis-cluster/7000
[root@apollo redis-cluster]# cp /opt/redis-3.2.9/redis.conf /opt/redis-3.2.9/redis-cluster/7001
[root@apollo redis-cluster]# cp /opt/redis-3.2.9/redis.conf /opt/redis-3.2.9/redis-cluster/7002
cp redis.conf redis-cluster/7000

4.4.3.配置子目录/opt/redis-3.2.9/redis-cluster/目录下三个子目录7000, 7001和7002下的redis.conf文件,主要修改内容为：

[root@apollo redis-cluster]# vim 7000/redis.conf 
[root@apollo redis-cluster]# vim 7001/redis.conf 
[root@apollo redis-cluster]# vim 7002/redis.conf 
###############配置修改项########################
bind 192.168.56.181 #修改为本机IP
port 7000 #要根据所在的子目录下配置
daemonize yes
pidfile /var/run/redis_7000.pid  #要根据所在的子目录下配置
logfile "/var/log/redis-7000.log" #要根据所在的子目录下配置
appendonly yes
cluster-enabled yes
cluster-config-file nodes-7000.conf #要根据所在的子目录下配置
cluster-node-timeout 15000
4.4.4.以相同方法配置其它两台务器

不同的是要用7003,7004,7005,7006,7007,7008端口号并创建相应的子目录。




5.启动redis集群

5.1.在第一台服务器上启动redis

[root@apollo redis-cluster]# redis-server 7001/redis.conf 
[root@apollo redis-cluster]# redis-server 7002/redis.conf 
[root@apollo redis-cluster]# redis-server 7003/redis.conf 
5.2.在第二台机器启动redis

[root@artemis redis-cluster]# redis-server 7003/redis.conf 
[root@artemis redis-cluster]# redis-server 7004/redis.conf 
[root@artemis redis-cluster]# redis-server 7005/redis.conf 
5.3 在第三台服务器上启动redis

[root@uranus redis-cluster]# redis-server 7006/redis.conf 
[root@uranus redis-cluster]# redis-server 7007/redis.conf 
[root@uranus redis-cluster]# redis-server 7008/redis.conf 
6.验证各个服务器上的redis启动状态

6.1.第一台服务器

[root@apollo redis-cluster]# ps -ef | grep redis
root     18313     1  0 16:44 ?        00:00:00 redis-server 192.168.56.181:7001 [cluster]
root     18325     1  0 16:44 ?        00:00:00 redis-server 192.168.56.181:7002 [cluster]
root     18371     1  0 16:45 ?        00:00:00 redis-server 192.168.56.181:7000 [cluster]
root     18449  2564  0 16:46 pts/0    00:00:00 grep --color=auto redis

[root@apollo redis-cluster]# netstat -tnlp | grep redis
tcp        0      0 192.168.56.181:7001     0.0.0.0:*               LISTEN      18313/redis-server  
tcp        0      0 192.168.56.181:7002     0.0.0.0:*               LISTEN      18325/redis-server  
tcp        0      0 192.168.56.181:17000    0.0.0.0:*               LISTEN      18371/redis-server  
tcp        0      0 192.168.56.181:17001    0.0.0.0:*               LISTEN      18313/redis-server  
tcp        0      0 192.168.56.181:17002    0.0.0.0:*               LISTEN      18325/redis-server  
tcp        0      0 192.168.56.181:7000     0.0.0.0:*               LISTEN      18371/redis-server  
6.2.第二台服务器

[root@artemis redis-cluster]# ps -ef | grep redis
root      5351     1  0 16:45 ?        00:00:00 redis-server 192.168.56.182:7003 [cluster]
root      5355     1  0 16:45 ?        00:00:00 redis-server 192.168.56.182:7004 [cluster]
root      5359     1  0 16:46 ?        00:00:00 redis-server 192.168.56.182:7005 [cluster]

[root@artemis redis-cluster]# netstat -tnlp | grep redis
tcp        0      0 192.168.56.182:7003     0.0.0.0:*               LISTEN      5351/redis-server 1 
tcp        0      0 192.168.56.182:7004     0.0.0.0:*               LISTEN      5355/redis-server 1 
tcp        0      0 192.168.56.182:7005     0.0.0.0:*               LISTEN      5359/redis-server 1 
tcp        0      0 192.168.56.182:17003    0.0.0.0:*               LISTEN      5351/redis-server 1 
tcp        0      0 192.168.56.182:17004    0.0.0.0:*               LISTEN      5355/redis-server 1 
tcp        0      0 192.168.56.182:17005    0.0.0.0:*               LISTEN      5359/redis-server 1 
6.3.第三台服务器

[root@uranus redis-cluster]# ps -ef | grep redis
root     21138     1  0 16:46 ?        00:00:00 redis-server 192.168.56.183:7006 [cluster]
root     21156     1  0 16:46 ?        00:00:00 redis-server 192.168.56.183:7008 [cluster]
root     21387     1  0 16:50 ?        00:00:00 redis-server 192.168.56.183:7007 [cluster]
root     21394  9287  0 16:50 pts/0    00:00:00 grep --color=auto redis

[root@uranus redis-cluster]# netstat -tnlp | grep redis
tcp        0      0 192.168.56.183:7006     0.0.0.0:*               LISTEN      2959/redis-server 1 
tcp        0      0 192.168.56.183:7007     0.0.0.0:*               LISTEN      2971/redis-server 1 
tcp        0      0 192.168.56.183:7008     0.0.0.0:*               LISTEN      2982/redis-server 1 
tcp        0      0 192.168.56.183:17006    0.0.0.0:*               LISTEN      2959/redis-server 1 
tcp        0      0 192.168.56.183:17007    0.0.0.0:*               LISTEN      2971/redis-server 1 
tcp        0      0 192.168.56.183:17008    0.0.0.0:*               LISTEN      2982/redis-server 1 
7.创建redis集群


redis-trib.rb 是一个 ruby 脚本工具，用来建立和管理 redis 集群，因为使用比较频繁，所以拷贝脚本 redis-trib.rb 到 /usr/local/bin/

[root@apollo src]# ./redis-trib.rb create --replicas 1 192.168.56.181:7000 192.168.56.181:7001 192.168.56.181:7002 192.168.56.182:7003 192.168.56.182:7004 192.168.56.182:7005 192.168.56.183:7006 192.168.56.183:7007 192.168.56.183:7008


>>> Creating cluster
>>> Performing hash slots allocation on 9 nodes...
Using 4 masters:
192.168.56.181:7000
192.168.56.182:7003
192.168.56.183:7006
192.168.56.181:7001
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.

gem本地安装

2，使用本地安装：
gem 的官方地址： http://rubygems.org/
mysql2的gem下载地址：https://rubygems.org/gems/mysql/versions/2.8.1-x86-mingw32
列出所有已安装的gem命令：
gem query --local
安装方法：下载.gem文件，用cd到.gem的所在目录，然后执行下面的命令：
gem install --local filename.gem
或者执行命令的时候带有.gem文件的路径名。
gem install --local F:/ruby/gem/filename.gem
注意：这是一个x86的版本，下载其它msyql或者mysql2的版本，都有安装成功，如果安装过程中报一个libmysql的错误，就到mysql/bin下考别这个文件到ruby/bin/下。


3，增加其它下载资源：

先通过gem env 查看gem运行环境gem env
　　增加两个更新的源地址：
gem sources -a http://gems.github.com   
gem sources -a http://gems.rubyforge.org


集群检测
redis-trib.rb check 127.0.0.1:7000
客户端连接
redis-cli -c -p 7000
客户端连接后执行查看
cluster nodes
4.

[ERR] Not all 16384 slots are covered by nodes.

原因：
这个往往是由于主node移除了，但是并没有移除node上面的slot，从而导致了slot总数没有达到16384，其实也就是slots分布不正确。所以在删除节点的时候一定要注意删除的是否是Master主节点。
1)、官方是推荐使用redis-trib.rb fix 来修复集群…. ….  通过cluster nodes看到7001这个节点被干掉了… 那么
[root@node01 src]#  ./redis-trib.rb fix 172.168.63.201:7001

redis-trib.rb fix 127.0.0.1:7001
修复完成后再用check命令检查下是否正确
[root@node01 src]# ./redis-trib.rb check172.168.63.202:7000
只要输入任意集群中节点即可，会自动检查所有相关节点。可以查看相应的输出看下是否是每个Master都有了slots,如果分布不均匀那可以使用下面的方式重新分配slot:
[root@node01 src]#  ./redis-trib.rb reshard 172.168.63.201:7001

5
配置完所有主节点后,报" ERR Invalid node address specified"
由于redis-trib.rb 对域名或主机名支持不好,故在创建集群的时候要使用ip:port的方式
redis-trib.rb create ip1:port1 ip2:port2 ip3:port3

6
创建集群时报某个err slot 0 is already busy (redis::commanderror)
这是由于之间创建集群没有成功,需要将nodes.conf和dir里面的文件全部删除(注意不要删除了redis.conf)


错误提示是
      slot插槽被占用了（这是 搭建集群前时，以前redis的旧数据和配置信息没有清理干净。）
解决方案是
          用redis-cli 登录到每个节点执行  flushall  和 cluster reset  就可以了。
然后重新执行群集脚本命令：
./redis-trib.rb create --replicas 0 192.168.3.15:6379 192.168.3.15:6380 192.168.3.15:6381  


：[ERR] Not all 16384 slots are covered by nodes. 如下图所示：

slot插槽出问题了，修复slot 执行下面的命令：
./redis-trib.rb fix 192.168.3.15:6379   

7
创建集群时一直处于"Waiting for the cluster to join...................................."的状态
这个问题原因不知,但解决方法是在redis.conf文件中把bind 127.0.0.1本地环回口改为物理接口.

8.
安装ruby redis时长时间没响应
这是由于天朝网络,解决办法是改ruby源(请自行baidu)或手动安装

9.
创建集群：
./redis-trib.rb  create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 
报错：
[ERR] Node 127.0.0.1:7000 is not empty. Either the node already knows other nodes (check with CLUSTER NODES) or contains some key in database 0.

解决：
删除生成的配置文件nodes.conf，如果不行则说明现在创建的结点包括了旧集群的结点信息，需要删除redis的持久化文件后再重启redis，比如：appendonly.aof、dump.rdb

