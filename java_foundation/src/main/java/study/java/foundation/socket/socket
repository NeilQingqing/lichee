一、通信方式：
        1、一个客户端连接一个服务器，或称为“点对点”（peer to peer）；
        2、多个客户端连接一个服务器，这就是最常见的方式；
        3、一个客户端连接多个服务器，这种方式很少见，主要用于一个客户端向多个服务器发送请求；
二、连接方式：
        1、短连接：连接—>传输数据—>关闭连接，也就是说当数据传输完之后会马上将连接关闭；一般在客户端数量较多而连接又比较频繁时采用短连接，常用于多个客户端连接一个服务器。
        2、长连接：连接—>传输数据—>保持连接—>传输数据—>保持连接……—>关闭连接，也就是说当数据传输完之后不会马上将连接关闭，而继续用该连接传输后续的数据。一般在客户端数量较少但连接又比较频繁时采用长连接，常用于点对点通信。
三、发送接收方式：
        1、异步：报文发送和接收是分开的，相互独立的，互不影响。这种方式又分两种情况：
                1)异步双工：接收和发送在同一个程序中，有两个不同的子进程分别负责发送和接收；
                2)异步单工：接收和发送是用两个不同的程序来完成。
        2、同步：发送报文和接收报文是同步进行的，即报文发送后等待接收返回报文。同步方式一般需要考虑超时问题，即报文发出后不能无限等待，需要设定超时时间，超过了这个时间发送方就不再等待读返回报文，直接通知超时返回。
四、读取报文的方式：
        1、阻塞与非阻塞方式：
                1)阻塞式：如果没有报文接收到，则读函数一直处于等待状态，直到有报文到达。
                2)非阻塞式：读函数不停地进行读动作，如果没有报文接收到，等待一段时间后超时返回，这种情况一般需要指定超时时间。
        2、一次性读写与循环读写方式：
                1)一次性读写：在接收或发送报文动作中一次性不加分别地全部读取或全部发送报文字节。
                2)不指定长度循环读写：一般发生在短连接中，受网络路由等限制，一次较长的报文可能在网络传输过程中被分解成了好几个包。一次读取可能不能全部读完一次报文，这就需要循环读报文，直到读完为止。
                3)带长度报文头的循环读写方式：这种情况一般是在长连接中，由于在长连接中没有条件能够判断循环读写什么时候结束，所以必须要加长度报文头。读函数先是读取报文头的长度，再根据这个长度去读报文。实际情况中，报头的码制格式还经常不一样，如果是非ASCII码的报文头，还必须转换成ASCII,常见的报文头码制有：
                1>n个字节的ASCII码；
                2>n个字节的BCD码；
                3>n个字节的网络整型码
                
1、Socket

Socket主要用来收发服务器数据。
(1) 主要方法
socket.getInputStream()     // 接收服务器输入  
socket.getOutputStream()    // 发送服务器输出  
socket.getInetAddress()     // 服务器地址  
socket.getPort()            // 服务器端口号  
socket.getLocalAddress()    // 本地地址  
socket.getLocalPort()       // 本地端口号  
socket.shutdownInput()      // 半关闭输入  
socket.shutdownOutput()     // 半关闭输出  
(2) Socket 的选项
TCP_NODELAY，是否使用Nagle算法。Socket.setTcpNoDelay(boolean)，设置为true表示立即发送数据包。
SO_TIMEOUT，指定系统等待的时间。socket.setSoTimeout(int)，0为一直等待，为默认值。
SO_LINGER，指定Socket关闭后如何处理尚未发送的数据包。socket.setSoLinger(boolean, int)，设置为true时，close()方法会被阻塞指定的秒数，等待发送数据和接受确认。
SO_SNDBUF，设置发送缓存区大小。socket.setSendBufferSize(int)。
SO_RCV_BUF，设置接收缓存区大小。socket.setReceiveBufferSize(int)。
SO_KEEPALIVE，设置是否与服务器保持连接。socket.setKeepAlive(boolean)。
OOBINLINE，发送单字节紧急数据。socket.setOOBInline(boolean)，socket.sendUrgentData(int)。
SO_REUSEADDR，是否允许重用Socket所绑定的本地地址。socket.setReuseAddress(boolean)。
IP_TOS，设置不同性能要求。socket.setTrafficClass(int)。


