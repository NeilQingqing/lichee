CGLIB介绍与原理

一、什么是CGLIB?
CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。
通常可以使用Java的动态代理创建代理，但当要代理的类没有实现接口或者为了更好的性能，CGLIB是一个好的选择。

二、CGLIB原理
CGLIB原理：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。
在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。它比使用java反射的JDK动态代理要快。

CGLIB底层：使用字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它要求你必须对JVM内部
结构包括class文件的格式和指令集都很熟悉。

CGLIB缺点：对于final方法，无法进行代理。
三、CGLIB的应用
广泛的被许多AOP的框架使用，例如Spring AOP和dynaop。Hibernate使用CGLIB来代理
单端single-ended(多对一和一对一)关联。

四、CGLIB的API
1、Jar包：
cglib-nodep-2.2.jar：使用nodep包不需要关联asm的jar包,jar包内部包含asm的类.
cglib-2.2.jar：使用此jar包需要关联asm的jar包,否则运行时报错.
2、CGLIB类库：
net.sf.cglib.core:底层字节码处理类，他们大部分与ASM有关系。
net.sf.cglib.transform:编译期或运行期类和类文件的转换
net.sf.cglib.proxy:实现创建代理和方法拦截器的类
net.sf.cglib.reflect:实现快速反射和C#风格代理的类
net.sf.cglib.util:集合排序等工具类
net.sf.cglib.beans:JavaBean相关的工具类


JDK中的动态代理：
JDK中的动态代理是通过反射类Proxy以及InvocationHandler回调接口实现的，
但是，JDK中所要进行动态代理的类必须要实现一个接口，也就是说只能对该类所实现接口中定义的方法进行代理，
这在实际编程中具有一定的局限性，而且使用反射的效率也并不是很高。

使用CGLib实现：
使用CGLib实现动态代理，完全不受代理类必须实现接口的限制，而且CGLib底层采用ASM字节码生成框架，
使用字节码技术生成代理类，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，
因为CGLib原理是动态生成被代理类的子类。