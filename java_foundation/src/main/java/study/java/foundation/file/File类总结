1.File类提供了对文件的信息的获取，如文件名、路径、权限等等属性，还可以创建和删除文件。

2.文件的创建、删除、权限的修改都涉及到系统底层，所以java使用jni技术来实现。

3.JNI技术 ---native 即 JNI,Java Native Interface
JNI技术使用实例
1）、创建一个Java类，里面包含着一个 native 的方法和加载库的方法 loadLibrary。
HelloNative.java 代码如下：

public class HelloNative
{
    static
    {
        System.loadLibrary("HelloNative");
    }
     
    public static native void sayHello();
     
    @SuppressWarnings("static-access")
    public static void main(String[] args)
    {
        new HelloNative().sayHello();
    }
}
  首先让大家注意的是native方法，那个加载库的到后面也起作用。
native 关键字告诉编译器（其实是JVM）调用的是该方法在外部定义，这里指的是C。如果大家直接运行这个代码，  
JVM会告之：“A Java Exception has occurred.”控制台输出如下：
Exception in thread "main" java.lang.UnsatisfiedLinkError: no HelloNative in java.library.path
    at java.lang.ClassLoader.loadLibrary(Unknown Source)
    at java.lang.Runtime.loadLibrary0(Unknown Source)
    at java.lang.System.loadLibrary(Unknown Source)
    at HelloNative.<clinit>(HelloNative.java:5)
    
    
  2）、运行javah，得到包含该方法的C声明头文件.h
  
     javac HelloNative.java
     javah HelloNative
    
    就得到了下面的 HelloNative.h文件 ：
    /* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class HelloNative */
 
#ifndef _Included_HelloNative
#define _Included_HelloNative
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     HelloNative
 * Method:    sayHello
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_HelloNative_sayHello
  (JNIEnv *, jclass);
 
#ifdef __cplusplus
}
#endif
#endif

  jni.h 这个文件，在/%JAVA_HOME%include            
  
 3、根据头文件，写C实现本地方法。
 
#include "HelloNative.h"
#include <stdio.h>
 
JNIEXPORT void JNICALL Java_HelloNative_sayHello
{
    printf("Hello，JNI");   
}

4、生成dll共享库，然后Java程序load库，调用即可。

在Windows上，MinGW GCC 运行如下：
gcc -m64  -Wl,--add-stdcall-alias -I"C:\Program Files\Java\jdk1.7.0_71\include" -I"C:\Program Files\Java\jdk1.7.0_71\include\include\win32" -shared -o HelloNative.dll HelloNative.c

-m64表示生成dll库是64位的。然后运行 HelloNative：
java HelloNative

 终于成功地可以看到控制台打印如下：
Hello，JNI




